[
    {
        "incomplete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double fahrenheit) {",
        "complete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double fahrenheit) {\n        double celsius = (fahrenheit - 32) * 5 / 9;\n        return Math.round(celsius * 100.0) / 100.0;\n    }\n}",
        "testFile": "TemperatureConverterTest.java"
    },
    {
        "incomplete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double f_temp) {\n        double celsius = (f_temp - 32) * 5 / 9;",
        "complete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double f_temp) {\n        double celsius = (f_temp - 32) * 5 / 9;\n        double celsius1 = Math.round(celsius * 100.0) / 100.0;\n        return celsius1;\n    }\n}",
        "testFile": "TemperatureConverterTest.java"
    },
    {
        "incomplete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double Fr) {\n        double C = ((Fr - 32) * 5) / 9;",
        "complete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double Fr) {\n        double C = ((Fr - 32) * 5) / 9;\n        return Math.round(C * 100.0) / 100.0;\n    }\n}",
        "testFile": "TemperatureConverterTest.java"
    },
    {
        "incomplete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double Fahrenheit) {\n        double Celsius = (Fahrenheit - 32) * 5 / 9;\n        double Celsius0 = Math.round(Celsius * 100.0);",
        "complete": "public class TemperatureConverter {\n    public static double fahrenheitToCelsius(double Fahrenheit) {\n        double Celsius = (Fahrenheit - 32) * 5 / 9;\n        double Celsius0 = Math.round(Celsius * 100.0) / 100.0;\n        return Celsius0;\n    }\n}",
        "testFile": "TemperatureConverterTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String nums = String.valueOf(num);\n        int sum = 0;  // The power needs to be 3, not the number of digits",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String nums = String.valueOf(num);\n        int sum = 0;\n\n        for (char ds : nums.toCharArray()) {\n            int di = Character.getNumericValue(ds);\n            sum += Math.pow(di, 3);\n        }\n\n        return sum == num;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String nums = String.valueOf(num);\n        int sum = 0;\n\n        // The power needs to be 3, not the number of digits",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String nums = String.valueOf(num);\n        int sum = 0;\n\n        // The power needs to be 3, not the number of digits\n        for (char ds : nums.toCharArray()) {\n            int di = Character.getNumericValue(ds);\n            sum += Math.pow(di, 3);\n        }\n\n        return sum == num;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int i) {\n        int j = 0;\n        int k = i;\n\n        // The power needs to be 3, not the number of digits\n        while (k > 0)",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int i) {\n        int j = 0;\n        int k = i;\n\n        // The power needs to be 3, not the number of digits\n        while (k > 0) {\n            int l = k % 10;\n            j += Math.pow(l, 3);\n            k /= 10;\n        }\n\n        return i == j;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int n) {\n        String k = String.valueOf(n);\n        int l = k.length();\n        int s = 0;\n        int p = l - 1;\n\n        // The power needs to be 3, not the number of digits\n        while (p >= 0) {\n            int i = Character.getNumericValue(k.charAt(p));",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int n) {\n        String k = String.valueOf(n);\n        int l = k.length();\n        int s = 0;\n        int p = l - 1;\n\n        // The power needs to be 3, not the number of digits\n        while (p >= 0) {\n            int i = Character.getNumericValue(k.charAt(p));\n            s += Math.pow(i, 3);\n            p--;\n        }\n\n        return s == n;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String numStr = String.valueOf(num);\n        int sum = 0;\n\n        // The power needs to be 3, not the number of digits\n        for (int i = 0; i < numStr.length(); i++){",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        String numStr = String.valueOf(num);\n        int sum = 0;\n\n        // The power needs to be 3, not the number of digits\n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            sum += Math.pow(digit, 3);\n        }\n\n        return sum == num;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        int sum = 0;\n        int temp = num;\n\n        // The power needs to be 3, not the number of digits\n        while (temp > 0) {\n            int digit = temp % 10;",
        "complete": "public class ArmstrongNumberChecker {\n    public static boolean isArmstrongNumber(int num) {\n        int sum = 0;\n        int temp = num;\n\n        // The power needs to be 3, not the number of digits\n        while (temp > 0) {\n            int digit = temp % 10;\n            sum += Math.pow(digit, 3);\n            temp /= 10;\n        }\n\n        return sum == num;\n    }\n}",
        "testFile": "ArmstrongNumberCheckerTest.java"
    },
    {
        "incomplete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String name) {\n       String cname = name.toUpperCase();",
        "complete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String name) {\n        String cname = name.toUpperCase();\n        String rname = new StringBuilder(cname).reverse().toString();\n        return cname.equals(rname);\n    }\n}",
        "testFile": "PalindromeCheckerTest.java"
    },
    {
        "incomplete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String p) {\n        String x = p.toLowerCase();",
        "complete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String p) {\n        String x = p.toLowerCase();\n        String rev = new StringBuilder(x).reverse().toString();\n        return rev.equals(x);\n    }\n}",
        "testFile": "PalindromeCheckerTest.java"
    },
    {
        "incomplete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String name) {\n        String x = name.toLowerCase();\n        char[] xArray = x.toCharArray();",
        "complete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String name) {\n        String x = name.toLowerCase();\n        char[] xArray = x.toCharArray();\n        char[] reversedArray = new char[xArray.length];\n        for (int i = 0; i < xArray.length; i++) {\n            reversedArray[i] = xArray[xArray.length - 1 - i];\n        }\n        String reversedX = new String(reversedArray);\n        return x.equals(reversedX);\n    }\n}",
        "testFile": "PalindromeCheckerTest.java"
    },
    {
        "incomplete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String str) {\n        String str1 = str.toLowerCase();\n        char[] str1Array = str1.toCharArray();\n        char[] reversedArray = new char[str1Array.length];",
        "complete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String str) {\n        String str1 = str.toLowerCase();\n        char[] str1Array = str1.toCharArray();\n        char[] reversedArray = new char[str1Array.length];\n        for (int i = 0; i < str1Array.length; i++) {\n            reversedArray[i] = str1Array[str1Array.length - 1 - i];\n        }\n        String str2 = new String(reversedArray);\n        return str1.equals(str2);\n    }\n}",
        "testFile": "PalindromeCheckerTest.java"
    },
    {
        "incomplete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String a)",
        "complete": "public class PalindromeChecker {\n    public static boolean isPalindrome(String a) {\n        String b = a.toLowerCase();\n        char[] bArray = b.toCharArray();\n        char[] reversedArray = new char[bArray.length];\n        for (int i = 0; i < bArray.length; i++) {\n            reversedArray[i] = bArray[bArray.length - 1 - i];\n        }\n        String c = new String(reversedArray);\n        return b.equals(c);\n    }\n}",
        "testFile": "PalindromeCheckerTest.java"
    },
	{
        "incomplete": "public class NumberReverser {\n    public static int[] reverseAndSum(int num) {\n        String numStr = String.valueOf(num);\n        String reversedStr = new StringBuilder(numStr).reverse().toString();",
        "complete": "public class NumberReverser {\n    public static int[] reverseAndSum(int num) {\n        String numStr = String.valueOf(num);\n        String reversedStr = new StringBuilder(numStr).reverse().toString();\n        int reversedNum = Integer.parseInt(reversedStr);\n        int sum = num + reversedNum;\n        return new int[]{reversedNum, sum};\n    }\n}",
        "testFile": "NumberReverserTest.java"
    },
    {
        "incomplete": "public class NumberReverser {\n    public static int[] reverseAndSum(int num1) {\n        String x = String.valueOf(num1);",
        "complete": "public class NumberReverser {\n    public static int[] reverseAndSum(int num1) {\n        String x = String.valueOf(num1);\n        String r = new StringBuilder(x).reverse().toString();\n        int reversedNum = Integer.parseInt(r);\n        int sum = num1 + reversedNum;\n        return new int[]{reversedNum, sum};\n    }\n}",
        "testFile": "NumberReverserTest.java"
    },
    {
        "incomplete": "public class NumberReverser {\n    public static int[] reverseAndSum(int number) {\n        int x = Math.abs(number);\n        String c = String.valueOf(x);\n        String v = new StringBuilder(c).reverse().toString();\n        int reversedNum = Integer.parseInt(v);\n        int sum;\n        if (number >= 0) {",
        "complete": "public class NumberReverser {\n    public static int[] reverseAndSum(int number) {\n        int x = Math.abs(number);\n        String c = String.valueOf(x);\n        String v = new StringBuilder(c).reverse().toString();\n        int reversedNum = Integer.parseInt(v);\n        int sum;\n        if (number >= 0) {\n            sum = x + reversedNum;\n        } else {\n            reversedNum *= -1;\n            sum = (x + Math.abs(reversedNum)) * -1;\n        }\n        return new int[]{reversedNum, sum};\n    }\n}",
        "testFile": "NumberReverserTest.java"
    },
    {
        "incomplete": "public class NumberReverser {\n    public static int[] reverseAndSum(int number) {\n        int n = number;\n        String rev;\n        if (n > 10) {\n            rev = new StringBuilder(String.valueOf(number)).reverse().toString();\n        } else {\n            rev = String.valueOf(number);\n        }\n        int r = Integer.parseInt(rev);",
        "complete": "public class NumberReverser {\n    public static int[] reverseAndSum(int number) {\n        int n = number;\n        String rev;\n        if (n > 10) {\n            rev = new StringBuilder(String.valueOf(number)).reverse().toString();\n        } else {\n            rev = String.valueOf(number);\n        }\n        int r = Integer.parseInt(rev);\n        int sum;\n        if (n > 10) {\n            sum = n + r;\n        } else {\n            sum = n + n;\n        }\n        return new int[]{r, sum};\n    }\n}",
        "testFile": "NumberReverserTest.java"
    },
    {
        "incomplete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < N; i++) {",
        "complete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j <= i; j++) {\n                result.append('*');\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    }\n}",
        "testFile": "TrianglePrinterTest.java"
    },
    {
        "incomplete": "public class TrianglePrinter {\n    public static String printTriangle(int num) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < num; i++) {\n            int j = 0;\n            while (j <= i) {",
        "complete": "public class TrianglePrinter {\n    public static String printTriangle(int num) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < num; i++) {\n            int j = 0;\n            while (j <= i) {\n                result.append('*');\n                j++;\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    }\n}",
        "testFile": "TrianglePrinterTest.java"
    },
    {
        "incomplete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j <= i; j++) {",
        "complete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j <= i; j++) {\n                result.append('*');\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    }\n}",
        "testFile": "TrianglePrinterTest.java"
    },
    {
        "incomplete": "public class TrianglePrinter {\n    public static String printTriangle(int n) {\n        StringBuilder result = new StringBuilder();\n        String c = \"*\";\n        for (int i = 1; i <= n; i++) {\n            for (int j = i; j < 2 * i; j++) {",
        "complete": "public class TrianglePrinter {\n    public static String printTriangle(int n) {\n        StringBuilder result = new StringBuilder();\n        String c = \"*\";\n        for (int i = 1; i <= n; i++) {\n            for (int j = i; j < 2 * i; j++) {\n                result.append(c);\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    }\n}",
        "testFile": "TrianglePrinterTest.java"
    },
    {
        "incomplete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();",
        "complete": "public class TrianglePrinter {\n    public static String printTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 1; i <= N; i++) {\n            result.append(\"*\".repeat(i)).append('\\n');\n        }\n        return result.toString();\n    }\n}",
        "testFile": "TrianglePrinterTest.java"
    },
    {
        "incomplete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] vs = input.split(\",\");",
        "complete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] vs = input.split(\",\");\n        int count = 0;\n\n        for (String v : vs) {\n            v = v.trim();\n            if (v.length() >= 2 && v.charAt(0) == v.charAt(v.length() - 1)) {\n                count += 1;\n            }\n        }\n\n        return count;\n    }\n}",
        "testFile": "StringCounterTest.java"
    },
    {
        "incomplete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] n = input.split(\",\");\n        int k = 0;\n        for (String y : n) {\n            y = y.trim();",
        "complete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] n = input.split(\",\");\n        int k = 0;\n        for (String y : n) {\n            y = y.trim();\n            if (y.length() >= 2 && y.charAt(0) == y.charAt(y.length() - 1)) {\n                k += 1;\n            }\n        }\n        return k;\n    }\n}",
        "testFile": "StringCounterTest.java"
    },
    {
        "incomplete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] inp = input.split(\",\");\n        int cnt = 0;\n        for (int i = 0; i < inp.length; i++) {\n            String ctr = inp[i].trim();",
        "complete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] inp = input.split(\",\");\n        int cnt = 0;\n        for (int i = 0; i < inp.length; i++) {\n            String ctr = inp[i].trim();\n            if (ctr.length() >= 2 && ctr.charAt(0) == ctr.charAt(ctr.length() - 1)) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}",
        "testFile": "StringCounterTest.java"
    },
    {
        "incomplete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] y = input.split(\",\");\n        int z = y.length;\n        int a = 0;\n        int b = 0;\n        while (b < z) {\n            String i = y[b].trim();",
        "complete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] y = input.split(\",\");\n        int z = y.length;\n        int a = 0;\n        int b = 0;\n        while (b < z) {\n            String i = y[b].trim();\n            if (i.length() >= 2 && i.charAt(0) == i.charAt(i.length() - 1)) {\n                a++;\n            }\n            b++;\n        }\n        return a;\n    }\n}",
        "testFile": "StringCounterTest.java"
    },
    {
        "incomplete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] b = input.split(\",\");\n        int k = b.length;\n        int m = 0;\n       int x = 0;",
        "complete": "public class StringCounter {\n    public static int countValidAlphabetStringsOfMinimumLength2(String input) {//The output of the program is the count of string values where (a) the length is >= 2;  AND (b) the first and last character of the string value are the same\n        String[] b = input.split(\",\");\n        int k = b.length;\n        int m = 0;\n        int x = 0;\n        while (m < k) {\n            String n = b[m].trim();\n            if (n.length() >= 2 && n.charAt(0) == n.charAt(n.length() - 1)) {\n                x++;\n            }\n            m++;\n        }\n        return x;\n    }\n}",
        "testFile": "StringCounterTest.java"
    },
    {
        "incomplete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {\n        if (m == 0)",
        "complete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0) {\n            return ackermann(m - 1, 1);\n        } else {\n            return ackermann(m - 1, ackermann(m, n - 1));\n        }\n    }\n}",
        "testFile": "AckermannFunctionTest.java"
    },
    {
        "incomplete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0)",
        "complete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0) {\n            return ackermann(m - 1, 1);\n        } else {\n            return ackermann(m - 1, ackermann(m, n - 1));\n        }\n    }\n}",
        "testFile": "AckermannFunctionTest.java"
    },
    {
        "incomplete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0) {\n            return ackermann(m - 1, 1);\n        } else if (m > 0 && n > 0) {",
        "complete": "public class AckermannFunction {\n    public static int a(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0) {\n            return a(m - 1, 1);\n        } else if (m > 0 && n > 0) {\n            return a(m - 1, a(m, n - 1));\n        }\n        return -1; // This line should never be reached\n    }\n}",
        "testFile": "AckermannFunctionTest.java"
    },
    {
        "incomplete": "public class AckermannFunction {\n    public static int ackermann(int m, int n) {",
        "complete": "public class AckermannFunction {\n    public static int ack(int m, int n) {\n        if (m == 0) {\n            return n + 1;\n        } else if (n == 0) {\n            return ack(m - 1, 1);\n        } else {\n            return ack(m - 1, ack(m, n - 1));\n        }\n    }\n}",
        "testFile": "AckermannFunctionTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        Map<Integer, Integer> rollToMarks = new HashMap<>();\n\n        for (String input : inputs) {\n            String[] parts = input.split(\",\");\n            int roll = Integer.parseInt(parts[0].trim());\n            int marks = Integer.parseInt(parts[2].trim());\n            rollToMarks.put(roll, rollToMarks.getOrDefault(roll, 0) + marks);",
        "complete": "public class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        if (records <= 0) {\n            return \"\";\n        }\n\n        Map<Integer, Integer> rollToMarks = new HashMap<>();\n\n        for (String input : inputs) {\n            String[] parts = input.split(\",\");\n            int roll = Integer.parseInt(parts[0].trim());\n            int marks = Integer.parseInt(parts[2].trim());\n            rollToMarks.put(roll, rollToMarks.getOrDefault(roll, 0) + marks);\n        }\n\n        StringBuilder result = new StringBuilder();\n        rollToMarks.keySet().stream().sorted().forEach(key -> {\n            result.append(key).append(\":\").append(rollToMarks.get(key)).append(\"\\n\");\n        });\n\n        return result.toString().trim();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {",
        "complete": "public class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        Map<Integer, Integer> rollToMarks = new HashMap<>();\n\n        for (String input : inputs) {\n            String[] parts = input.split(\",\");\n            int roll = Integer.parseInt(parts[0].trim());\n            int marks = Integer.parseInt(parts[2].trim());\n            rollToMarks.put(roll, rollToMarks.getOrDefault(roll, 0) + marks);\n        }\n\n        StringBuilder result = new StringBuilder();\n        rollToMarks.keySet().stream().sorted().forEach(key -> {\n            result.append(key).append(\":\").append(rollToMarks.get(key)).append(\";\");\n        });\n\n        // Remove the last semi-colon\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        Map<Integer, Integer> rollToMarks = new HashMap<>();\n\n        for (String input : inputs) {\n            String[] parts = input.split(\",\");\n            int roll = Integer.parseInt(parts[0].trim());\n            int marks = Integer.parseInt(parts[2].trim());\n            rollToMarks.put(roll, rollToMarks.getOrDefault(roll, 0) + marks);",
        "complete": "public class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        Map<Integer, Integer> rollToMarks = new HashMap<>();\n\n        for (String input : inputs) {\n            String[] parts = input.split(\",\");\n            int roll = Integer.parseInt(parts[0].trim());\n            int marks = Integer.parseInt(parts[2].trim());\n            rollToMarks.put(roll, rollToMarks.getOrDefault(roll, 0) + marks);\n        }\n\n        StringBuilder result = new StringBuilder();\n        rollToMarks.keySet().stream().sorted().forEach(key -> {\n            result.append(key).append(\":\").append(rollToMarks.get(key)).append(\";\");\n        });\n\n        // Remove the last semi-colon\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        List<String[]> t = new ArrayList<>();\n        for (int n = 0; n < records; n++) {\n            String[] s = inputs.get(n).split(\",\");\n            t.add(s);\n        }\n\n        Map<Integer, Integer> sum = new HashMap<>();\n        for (String[] n : t) {\n            int rollNumber = Integer.parseInt(n[0].trim());",
        "complete": "public class MarksManager {\n    public static String manageMarks(int records, List<String> inputs) {\n        // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n        if (records <= 0) {\n            return \"\";\n        }\n\n        List<String[]> t = new ArrayList<>();\n        for (int n = 0; n < records; n++) {\n            String[] s = inputs.get(n).split(\",\");\n            t.add(s);\n        }\n\n        Map<Integer, Integer> sum = new HashMap<>();\n        for (String[] n : t) {\n            int rollNumber = Integer.parseInt(n[0].trim());\n            int marks = Integer.parseInt(n[2].trim());\n            sum.put(rollNumber, sum.getOrDefault(rollNumber, 0) + marks);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (int n : new TreeSet<>(sum.keySet())) {\n            result.append(n).append(\":\").append(sum.get(n)).append(\";\");\n        }\n\n        // Remove the last semi-colon\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n    public static String manageMarks(int records, List<String> inputs) {\n        Map<Integer, Integer> dict = new HashMap<>();\n        List<String[]> data = new ArrayList<>();\n        for (int i = 0; i < records; i++) {\n            data.add(inputs.get(i).split(\",\"));\n        }\n        for (String[] x : data) {\n            int keys = Integer.parseInt(x[0].trim());\n            int values = Integer.parseInt(x[2].trim());\n            dict.put(keys, dict.getOrDefault(keys, 0) + values);\n        }\n        StringBuilder result = new StringBuilder();",
        "complete": "public class MarksManager {\n    // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n    public static String manageMarks(int records, List<String> inputs) {\n        Map<Integer, Integer> dict = new HashMap<>();\n        List<String[]> data = new ArrayList<>();\n        for (int i = 0; i < records; i++) {\n            data.add(inputs.get(i).split(\",\"));\n        }\n        for (String[] x : data) {\n            int keys = Integer.parseInt(x[0].trim());\n            int values = Integer.parseInt(x[2].trim());\n            dict.put(keys, dict.getOrDefault(keys, 0) + values);\n        }\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, Integer> entry : dict.entrySet()) {\n            result.append(entry.getKey()).append(\":\").append(entry.getValue()).append(\";\");\n        }\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n        return result.toString();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "import java.util.*;\npublic class MarksManager {\n    // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n    public static String manageMarks(int records, List<String> inputs) {\n        Map<Integer, Integer> a = new HashMap<>();\n        List<String[]> lst = new ArrayList<>();\n        for (int i = 0; i < records; i++) {\n            lst.add(inputs.get(i).split(\",\"));\n        }\n        for (String[] i : lst) {\n            int x = Integer.parseInt(i[0].trim());\n            int y = Integer.parseInt(i[i.length - 1].trim());\n            if (a.containsKey(x)) {\n                a.put(x, a.get(x) + y);\n            } else {\n                Map<Integer, Integer> b = new HashMap<>();\n                b.put(x, y);\n                a.putAll(b);\n            }\n        }\n        List<String> L1 = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : a.entrySet()) {\n            L1.add(String.format(\"%d:%d\", entry.getKey(), entry.getValue()));\n        }\n        Collections.sort(L1);",
        "complete": "public class MarksManager {\n    // Keep the answer in a colon and semi-colon separated format such as 101:30;102:20\n    public static String manageMarks(int records, List<String> inputs) {\n        Map<Integer, Integer> a = new HashMap<>();\n        List<String[]> lst = new ArrayList<>();\n        for (int i = 0; i < records; i++) {\n            lst.add(inputs.get(i).split(\",\"));\n        }\n        for (String[] i : lst) {\n            int x = Integer.parseInt(i[0].trim());\n            int y = Integer.parseInt(i[i.length - 1].trim());\n            if (a.containsKey(x)) {\n                a.put(x, a.get(x) + y);\n            } else {\n                Map<Integer, Integer> b = new HashMap<>();\n                b.put(x, y);\n                a.putAll(b);\n            }\n        }\n        List<String> L1 = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : a.entrySet()) {\n            L1.add(String.format(\"%d:%d\", entry.getKey(), entry.getValue()));\n        }\n        Collections.sort(L1);\n        StringBuilder result = new StringBuilder();\n        for (String i : L1) {\n            result.append(i).append(\";\");\n        }\n        if (result.length() > 0) {\n            result.setLength(result.length() - 1);\n        }\n        return result.toString();\n    }\n}",
        "testFile": "MarksManagerTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int N) {\n        StringBuilder result = new StringBuilder();\n        String LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n        for (int i = 0; i < N; i++) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int N) {\n        StringBuilder result = new StringBuilder();\n        String LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n        for (int i = 0; i < N; i++) {\n            result.append('_');\n            for (int j = 0; j <= i; j++) {\n                result.append(LETTERS.charAt(j)).append('_');\n            }\n            result.append('\\n');\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int N) {\n        StringBuilder result = new StringBuilder();\n\n        for (int x = 1; x <= N; x++) {\n            result.append('_');\n            int j = 65;\n            for (int y = 1; y <= x; y++) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int N) {\n        StringBuilder result = new StringBuilder();\n\n        for (int x = 1; x <= N; x++) {\n            result.append('_');\n            int j = 65;\n            for (int y = 1; y <= x; y++) {\n                result.append((char) j).append('_');\n                j++;\n            }\n            result.append('\\n');\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int num) {\n        StringBuilder result = new StringBuilder();\n\n        if (num <= 26 && num >= 1) {\n            for (int i = 1; i <= num; i++) {\n                int j = 0;\n                result.append('_');\n                while (j < i) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int num) {\n        StringBuilder result = new StringBuilder();\n\n        if (num <= 26 && num >= 1) {\n            for (int i = 1; i <= num; i++) {\n                int j = 0;\n                result.append('_');\n                while (j < i) {\n                    result.append((char) (65 + j)).append('_');\n                    j++;\n                }\n                result.append('\\n');\n            }\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 65; j <= 65 + i; j++) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 65; j <= 65 + i; j++) { // using ASCII codes for Capital Alphabets\n                result.append('_').append((char) j);\n            }\n            result.append('_').append('\\n');\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n        char[] a = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\n        for (int i = 0; i < n; i++) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n        char[] a = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                result.append('_').append(a[j]);\n            }\n            result.append('_').append('\\n');\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n        String a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        int i = 0;\n        String j = \"_\";\n\n        while (i < n && n <= 26) {",
        "complete": "public class AlphabetPattern {\n    // Keep the answer in a format such as _A_\\n_A_B_\\n_A_B_C_\\n\n    public static String printAlphabetPattern(int n) {\n        StringBuilder result = new StringBuilder();\n        String a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        int i = 0;\n        String j = \"_\";\n\n        while (i < n && n <= 26) {\n            j = j + a.substring(i, i + 1) + \"_\";\n            result.append(j).append('\\n');\n            i = i + 1;\n        }\n\n        return result.toString();\n    }\n}",
        "testFile": "AlphabetPatternTest.java"
    },
    {
        "incomplete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        Set<Character> alphabetSet = new HashSet<>();\n;        for (char c : alphabet.toCharArray()) {\n            alphabetSet.add(c);\n        }",
        "complete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        Set<Character> alphabetSet = new HashSet<>();\n        for (char c : alphabet.toCharArray()) {\n            alphabetSet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : s.toLowerCase().toCharArray()) {\n            if (Character.isLetter(c)) {\n                inputSet.add(c);\n            }\n        }\n\n        return inputSet.containsAll(alphabetSet);\n    }\n}",
        "testFile": "PangramCheckerTest.java"
    },
    {
        "incomplete": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PangramChecker {\n    public static boolean isPangram(String inp) {\n        List<Integer> letters = new ArrayList<>();\n        for (int i = 97; i < 123; i++) {\n            letters.add(i);\n        }\n        List<Integer> miss = new ArrayList<>();\n        for (int i : letters) {",
        "complete": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PangramChecker {\n    public static boolean isPangram(String inp) {\n        List<Integer> letters = new ArrayList<>();\n        for (int i = 97; i < 123; i++) {\n            letters.add(i);\n        }\n        List<Integer> miss = new ArrayList<>();\n        for (int i : letters) {\n            char t = (char) i;\n            char q = (char) (i - 32);\n            if (inp.indexOf(t) == -1 && inp.indexOf(q) == -1) {\n                miss.add(i);\n            }\n        }\n        return miss.isEmpty();\n    }\n}",
        "testFile": "PangramCheckerTest.java"
    },
    {
        "incomplete": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String inp) {\n        Set<Character> alphabet = new HashSet<>();\n        for (char c = 'a'; c <= 'z'; c++) {\n            alphabet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : inp.toLowerCase().toCharArray()) {",
        "complete": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String inp) {\n        Set<Character> alphabet = new HashSet<>();\n        for (char c = 'a'; c <= 'z'; c++) {\n            alphabet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : inp.toLowerCase().toCharArray()) {\n            if (Character.isLetter(c)) {\n                inputSet.add(c);\n            }\n        }\n\n        List<Character> missing = new ArrayList<>();\n        for (char c : alphabet) {\n            if (!inputSet.contains(c)) {\n                missing.add(c);\n            }\n        }\n\n        return missing.isEmpty();\n    }\n}",
        "testFile": "PangramCheckerTest.java"
    },
    {
        "incomplete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String x) {\n        String alp = \"abcdefghijklmnopqrstuvwxyz\";\n        Set<Character> alphabetSet = new HashSet<>();",
        "complete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String x) {\n        String alp = \"abcdefghijklmnopqrstuvwxyz\";\n        Set<Character> alphabetSet = new HashSet<>();\n        for (char c : alp.toCharArray()) {\n            alphabetSet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : x.toCharArray()) {\n            if (Character.isLetter(c)) {\n                inputSet.add(c);\n            }\n        }\n\n        return inputSet.containsAll(alphabetSet);\n    }\n}",
        "testFile": "PangramCheckerTest.java"
    },
    {
        "incomplete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String str) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        Set<Character> alphabetSet = new HashSet<>();\n        for (char c : alphabet.toCharArray()) {\n            alphabetSet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : str.toLowerCase().toCharArray()) {",
        "complete": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class PangramChecker {\n    public static boolean isPangram(String str) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        Set<Character> alphabetSet = new HashSet<>();\n        for (char c : alphabet.toCharArray()) {\n            alphabetSet.add(c);\n        }\n\n        Set<Character> inputSet = new HashSet<>();\n        for (char c : str.toLowerCase().toCharArray()) {\n            if (Character.isLetter(c)) {\n                inputSet.add(c);\n            }\n        }\n\n        return inputSet.containsAll(alphabetSet);\n    }\n}",
        "testFile": "PangramCheckerTest.java"
    }
]